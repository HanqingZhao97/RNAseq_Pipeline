"""
__authors__: Kevin Chau, Hanqing Zhao
__date__: 2019-04-17
__description__: RNA-Seq quality control
"""
import os
configfile: "../../config.yaml"
# Sub-Workflows

subworkflow QC:
    workdir: "workflows/QC"
    snakefile: "workflows/QC/Snakefile"  # Not required, but helpful
    configfile: "../../config.yaml"

if not os.path.exists("../../data/QC"):
    os.makedirs("../../data/QC")

rule picard_tools:
    input:
        "../../data/STAR_ALIGN/"+config["FASTQS"]["prefix"]+".STARAligned.sortedByCoord.out.bam",
        #reference genome
        os.path.join(config["GENOME_DIR"], config["GENOME_FASTA"]),
        #CollectRnaSeqMetrics
        os.path.join(config["GENOME_DIR"], "refFlat.txt"),
        os.path.join(config["GENOME_DIR"], "rRNA.txt")
    output:
        #CollectMultipleMetrics
        "../../data/QC/"+config["FASTQS"]["prefix"]+".multiple_metrics.txt",
        #MarkDuplicates
        "../../data/QC/"+config["FASTQS"]["prefix"]+".marked_duplicates.bam",
        "../../data/QC/"+config["FASTQS"]["prefix"]+".marked_dup_metrics.txt",
        #CollectRnaSeqMetrics
        "../../data/QC/"+config["FASTQS"]["prefix"]+".RNA_Metrics.txt",
        #CollectInsertSizeMetrics
        "../../data/QC/"+config["FASTQS"]["prefix"]+".insert_size_metrics.txt",
        "../../data/QC/"+config["FASTQS"]["prefix"]+".insert_size_histogram.pdf",
        #CollectAlignmentSummaryMetrics
        "../../data/QC/"+config["FASTQS"]["prefix"]+".CollectalignmentSummaryMetricsoutput.txt",
        #CollectGcBiasMetrics
        "../../data/QC/"+config["FASTQS"]["prefix"]+".GC_bias_metrics.txt",
        "../../data/QC/"+config["FASTQS"]["prefix"]+".GC_bias_metrics.pdf",
        "../../data/QC/"+config["FASTQS"]["prefix"]+".summary_metrics.txt"

    run:
        shell("picard CollectMultipleMetrics I={input[0]} ASSUME_SORTED=TRUE O={output[0]} R={input[1]}")
        shell("picard MarkDuplicates I={input[0]} O={output[1]} M={output[2]}")
        shell("picard CollectRnaSeqMetrics I={input[0]} O={output[3]} REF_FLAT={input[2]} "
            "STRAND=SECOND_READ_TRANSCRIPTION_STRAND RIBOSOMAL_INTERVALS={input[3]}")
        shell("picard CollectInsertSizeMetrics I={input[0]} O={output[4]} H={output[5]}")
        shell("picard CollectAlignmentSummaryMetrics R={input[1]} INPUT={input[0]} OUTPUT={output[6]}")
        shell("picard CollectGcBiasMetrics I={input[0]} O={output[7]} CHART={output[8]} S={output[9]}")

rule feature_counts:
    input:
        os.path.join("../../data/STAR_ALIGN", config["FASTQS"]["prefix"] + ".bam"),
        os.path.join(config["GENOME_DIR"], config["GENOME_GTF"]),
        os.path.join(config["GENOME_DIR"], config["GENOME_FASTA"])
    output:
        os.path.join("../../data/QC", config["FASTQS"]["prefix"] + ".counts.txt"),
        "../../log/"+config["FASTQS"]["prefix"]+".featureCounts.out"
    shell:
        "featureCounts -p -C -t exon -g gene_id -M --fraction -s 2 "
        "-a {input[1]} -o {output} {input[0]} >> {output[1]}"

rule RNA_seQC:
    input:
        "../../data/STAR_ALIGN/"+config["FASTQS"]["prefix"]+".STARAligned.sortedByCoord.out.bam",
        os.path.join(config["GENOME_DIR"], config["GENOME_GTF"]),
        os.path.join(config["GENOME_DIR"], config["GENOME_FASTA"])
    output:
        "../../data/STAR_ALIGN/"+config["FASTQS"]["prefix"]+".STARAligned.sortedByCoord.out.bam.bai",
        os.path.join("../../data/QC", config["FASTQS"]["prefix"] + ".testReport/"),
        "../../log/"+config["FASTQS"]["prefix"]+".RNA-SeQC.out"
    run:
        shell("samtools index {input[0]} {output[0]}")
        #run rna-seqc
        shell("rna-seqc -n 1000 -s {input[0]} -t {input[1]} -r {input[2]} -o {output[1]} >> {output[2]}")

rule Mt_percentage:
    input:
        "../../data/STAR_ALIGN/"+config["FASTQS"]["prefix"]+".STARAligned.sortedByCoord.out.bam",
    output:
        os.path.join("../../log", config["FASTQS"]["prefix"] + ".Mt.txt")
    shell:
        "echo '100 * $(samtools view -c {input[0]} chrM) / $(samtools view -c {input[0]})' | bc -l > {output[0]}"
